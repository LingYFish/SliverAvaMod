// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as appropriate.
#include "entityFragmentUtil.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "util.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

// uniform highp float TIME;
UNIFORM vec2 viewportSize;

varying vec3 fragPos;
varying vec3 vertColor;

// One-liner rotation matrix
mat4 rotationMatrix(vec3 axis, float angle) {
    return mat4(vec4(cos(angle) + axis.x * axis.x * (1.0 - cos(angle)), axis.x * axis.y * (1.0 - cos(angle)) - axis.z * sin(angle), axis.x * axis.z * (1.0 - cos(angle)) + axis.y * sin(angle), 0.0),vec4(axis.y * axis.x * (1.0 - cos(angle)) + axis.z * sin(angle), cos(angle) + axis.y * axis.y * (1.0 - cos(angle)), axis.y * axis.z * (1.0 - cos(angle)) - axis.x * sin(angle), 0.0),vec4(axis.z * axis.x * (1.0 - cos(angle)) - axis.y * sin(angle), axis.z * axis.y * (1.0 - cos(angle)) + axis.x * sin(angle), cos(angle) + axis.z * axis.z * (1.0 - cos(angle)), 0.0),vec4(0.0, 0.0, 0.0, 1.0));
}

void main() {
    vec4 texColor = texture2D(TEXTURE_0, uv);
    if (texColor.a > 0.5) {
        texColor.r = clamp(cos(TIME * 10.0) * 1.5 + 0.5, 0.0, 1.0);
        texColor.g = clamp(cos(TIME * 10.0 - (120.0 / 57.2958)) * 1.5 + 0.5, 0.0, 1.0);
        texColor.b = clamp(cos(TIME * 10.0 + (120.0 / 57.2958)) * 1.5 + 0.5, 0.0, 1.0);
        gl_FragColor = texColor;
    }
    else {
        discard;
    }
}